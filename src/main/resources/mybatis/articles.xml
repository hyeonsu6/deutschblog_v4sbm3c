<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.mvc.articles.ArticlesDAOInter">
	<!-- 등록한 레코드 갯수 1 리턴, #{managerno}: public int getManagerno() 호출됨 -->
	<insert id="create" parameterType="dev.mvc.articles.ArticlesVO">
		INSERT INTO
		articles(articlesno, managerno, topicno, title, article, pw,
		word,
		file1, file1saved, thumb1, size1, gdate)
		VALUES(articles_seq.nextval,
		#{managerno}, #{topicno}, #{title}, #{article}, #{pw}, #{word},
		#{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate)
	</insert>

	<!-- 모든 카테고리의 등록된 글목록 -->
	<select id="list_all" resultType="dev.mvc.articles.ArticlesVO">
		SELECT articlesno, managerno,
		topicno, title, article, recom, cnt, replycnt,
		pw, word, gdate,
		file1,
		file1saved, thumb1, size1
		FROM articles
		ORDER BY articlesno DESC
	</select>

	<!-- 특정 카테고리의 등록된 글목록 -->
	<select id="list_by_topicno"
		resultType="dev.mvc.articles.ArticlesVO" parameterType="int">
		SELECT
		articlesno, managerno, topicno, title, article, recom, cnt, replycnt,
		gdate,
		file1, file1saved, thumb1, size1
		FROM articles
		WHERE topicno =
		#{topicno}
		ORDER BY articlesno DESC
	</select>

	<!-- 일반적인 조회 -->
	<select id="read" resultType="dev.mvc.articles.ArticlesVO"
		parameterType="int">
		SELECT articlesno, managerno, topicno, title, article,
		recom, cnt, replycnt,
		pw, word, gdate,
		file1, file1saved, thumb1, size1,
		map, youtube
		FROM articles
		WHERE articlesno = #{articlesno}
	</select>

	<!-- map 등록, 수정, 삭제, HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로, 보통 3개 이하의 
		적은 변수만 전달하는 경우 HashMap 사용 권장 -->
	<update id="map" parameterType="HashMap">
		UPDATE articles SET map=#{map}
		WHERE articlesno=#{articlesno}
	</update>

	<!-- Youtube 등록, 수정, 삭제, HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로, 보통 3개 
		이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
	<update id="youtube" parameterType="HashMap">
		UPDATE articles SET
		youtube=#{youtube} WHERE articlesno=#{articlesno}
	</update>

	<!-- 카테고리별 검색 목록 -->
	<select id="list_by_topicno_search"
		resultType="dev.mvc.articles.ArticlesVO" parameterType="HashMap">
		SELECT articlesno, managerno, topicno, title, article, recom, cnt,
		replycnt, word, gdate,
		file1, file1saved, thumb1, size1, map, youtube
		FROM articles
		<choose>
			<when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
				WHERE topicno=#{topicno}
			</when>
			<otherwise> <!-- 검색하는 경우 -->
				WHERE topicno=#{topicno} AND (UPPER(title) LIKE '%' ||
				UPPER(#{word}) || '%'
				OR UPPER(article) LIKE '%' || UPPER(#{word}) ||
				'%'
				OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
			</otherwise>
		</choose>
		ORDER BY articlesno DESC
	</select>

	<!-- 카테고리별 검색 레코드 갯수 -->
	<select id="search_count" resultType="int"
		parameterType="HashMap">
		SELECT COUNT(*) as cnt
		FROM articles
		<choose>
			<when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
				WHERE topicno=#{topicno}
			</when>
			<otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
				WHERE topicno=#{topicno} AND (UPPER(title) LIKE '%' ||
				UPPER(#{word}) || '%'
				OR UPPER(article) LIKE '%' || UPPER(#{word}) ||
				'%'
				OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
			</otherwise>
		</choose>
	</select>

	<!-- 카테고리별 검색 + 페이징 목록 -->
	<select id="list_by_topicno_search_paging"
		resultType="dev.mvc.articles.ArticlesVO"
		parameterType="dev.mvc.articles.ArticlesVO">
		SELECT articlesno, managerno, topicno, title, article, recom, cnt,
		replycnt, gdate, file1, file1saved, thumb1, size1, map, youtube, r
		FROM (
		SELECT articlesno, managerno, topicno, title, article, recom,
		cnt, replycnt,
		gdate, file1, file1saved, thumb1, size1, map, youtube,
		rownum as r
		FROM (
		SELECT articlesno, managerno, topicno, title,
		article, recom, cnt, replycnt,
		gdate, file1, file1saved, thumb1, size1,
		map, youtube
		FROM articles
		<choose>
			<when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
				WHERE topicno=#{topicno}
			</when>
			<otherwise>
				WHERE topicno=#{topicno} AND (UPPER(title) LIKE '%' ||
				UPPER(#{word}) ||
				'%'
				OR UPPER(article) LIKE '%' || UPPER(#{word}) ||
				'%'
				OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
			</otherwise>
		</choose>
		ORDER BY articlesno DESC
		)
		)
		WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>

		<!-- 1 page: WHERE r >= 1 AND r <= 10; 2 page: WHERE r >= 11 AND r <= 20; 
			3 page: WHERE r >= 21 AND r <= 30; -->
	</select>

	<!-- 패스워드 검사 -->
	<select id="password_check" resultType="int"
		parameterType="HashMap">
		SELECT COUNT(*) as cnt
		FROM articles
		WHERE articlesno =
		#{articlesno} AND pw=#{pw}
	</select>

	<!-- 글 수정 -->
	<update id="update_text"
		parameterType="dev.mvc.articles.ArticlesVO">
		UPDATE articles
		SET title=#{title}, article=#{article},
		word=#{word}
		WHERE articlesno = #{articlesno}
	</update>


	<!-- 파일 수정 -->
	<update id="update_file"
		parameterType="dev.mvc.articles.ArticlesVO">
		UPDATE articles
		SET file1=#{file1},
		file1saved=#{file1saved}, thumb1=#{thumb1},
		size1=#{size1}
		WHERE
		articlesno = #{articlesno}
	</update>

	<!-- 삭제 -->
	<delete id="delete" parameterType="int">
		DELETE FROM articles
		WHERE
		articlesno=#{articlesno}
	</delete>

	<!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
	<select id="count_by_topicno" resultType="int"
		parameterType="int">
		SELECT COUNT(*) as cnt
		FROM articles
		WHERE topicno=#{topicno}
	</select>
	
	<!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_topicno" parameterType="int">
    DELETE FROM articles
    WHERE topicno=#{topicno}
  </delete>


</mapper> 